数据成员不能在类体中被显式初始化
class A
{
int nCount=0;//NG
}

如果只声明了一个类，没定义类，那么可以声明指向该类的指针和引用。因为指针和引用都有固定的大小


类的设计者通过把成员函数声明为const 以表明它们不修改类对象
关键字const 被放在成员
函数的参数表和函数体之间对于在类体之外定义的const 成员函数我们必须在它的定义
和声明中同时指定关键字const

class Screen {
char get() const { return _screen[_cursor]; }
}

class Screen {
char get() const;
}
char Screen::get() const
{...}


const 成员函数可以被相同参数表的非const 成员函数重载例如
class Screen {
public:
char get(int x, int y);
char get(int x, int y) const;
// ...
};
对象是否常量决定了调用哪个函数。
常对象调用const函数，非常对象调用非const成员。


在派生类对象的基类对象构造过程中，该类的类型是基类类型。在基类对象的初始化中，派生类对象BuyTransaction相关部分并未被初始化，所以其时把这些部分当作根本不存在是最安全的。 在一个派生类对象的构造器开始执行之前，它不会成为一个派生类对象的。
在对象的析构期间，存在与上面同样的逻辑。一旦一个派生类的析构器运行起来，该对象的派生类数据成员就被假设为是未定义的值，这样以来，C++就把它们当做是不存在一样。一旦进入到基类的析构器中，该对象即变为一个基类对象，C++中各个部分（虚函数，dynamic_cast运算符等等）都这样处理。

